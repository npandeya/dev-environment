- name: Setup Bastion Host
  hosts: bastion
  become: true
  vars:
    vpn_subnet: "10.8.0.0"
    vpn_netmask: "255.255.255.0"
    vpn_proto: "udp"
    vpn_port: 1194
    client_name: "client1"

  tasks:
    # Install dependencies
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    # Download kubectl
    - name: Download kubectl binary
      shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      args:
        executable: /bin/bash

    # Move kubectl to /usr/local/bin
    - name: Move kubectl to /usr/local/bin
      command: mv kubectl /usr/local/bin/kubectl

    # Set executable permissions
    - name: Set permissions for kubectl
      file:
        path: /usr/local/bin/kubectl
        mode: '0755'

    # Verify kubectl installation
    - name: Verify kubectl version
      command: kubectl version --client --output=yaml

    # Install Helm
    - name: Install helm
      shell: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
      args:
        executable: /bin/bash

    # Create .kube directory
    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # Fetch kubeconfig from MicroK8s
    - name: Retrieve kubeconfig from MicroK8s
      command: microk8s config
      delegate_to: "{{ groups['control_nodes'][0] }}"
      register: kubeconfig_output

    - name: Save kubeconfig to bastion
      copy:
        content: "{{ kubeconfig_output.stdout }}"
        dest: /home/ubuntu/.kube/config

    - name: Set permissions for kubeconfig
      file:
        path: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    # Add Kubernetes aliases
    - name: Create Kubernetes aliases script
      copy:
        dest: /home/ubuntu/.kube_aliases
        content: |
          alias k='kubectl'
          alias kga='kubectl get all'
          alias kgp='kubectl get pods'
          alias kdp='kubectl delete pods --grace-period=0 --force'
          alias kgn='kubectl get nodes'
          alias kgns='kubectl get namespaces'
          alias kns='kubectl config set-context --current --namespace'
          alias kaf='kubectl apply -f'
          alias kdf='kubectl delete -f'
          alias kl='kubectl logs'
          alias kd='kubectl describe'
          alias ke='kubectl exec -it'
          alias kctx='kubectl config use-context'
          alias kc='kubectl config'
          alias kdr='kubectl rollout restart'
          alias kex='kubectl explain'

    - name: Set ownership for Kubernetes aliases script
      file:
        path: /home/ubuntu/.kube_aliases
        owner: ubuntu
        group: ubuntu

    - name: Source Kubernetes aliases in .bashrc
      become_user: ubuntu
      lineinfile:
        path: /home/ubuntu/.bashrc
        line: "source /home/ubuntu/.kube_aliases"
        state: present

    # ---------------------------------------
    # OPENVPN INSTALLATION AND CONFIGURATION
    # ---------------------------------------
    - name: Install OpenVPN and EasyRSA
      apt:
        name:
          - openvpn
          - easy-rsa
          - net-tools
        state: present
        update_cache: yes

    # Configure EasyRSA for PKI
    - name: Ensure easy-rsa directory exists
      file:
        path: /etc/openvpn/easy-rsa
        state: directory

    - name: Copy EasyRSA files
      shell: cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa/
      args:
        executable: /bin/bash

    - name: Initialize PKI
      command: ./easyrsa init-pki
      args:
        chdir: /etc/openvpn/easy-rsa
        creates: /etc/openvpn/easy-rsa/pki

    - name: Check if CA exists
      stat:
        path: /etc/openvpn/easy-rsa/pki/ca.crt
      register: ca_crt_stat

    - name: Build CA (non-interactive)
      command: ./easyrsa build-ca nopass
      args:
        chdir: /etc/openvpn/easy-rsa
      environment:
        EASYRSA_BATCH: "1"
        EASYRSA_REQ_CN: "My Easy-RSA CA"
      when: not ca_crt_stat.stat.exists

    - name: Check if Server cert exists
      stat:
        path: /etc/openvpn/easy-rsa/pki/issued/server.crt
      register: server_crt_stat

    - name: Generate server certificate
      command: ./easyrsa build-server-full server nopass
      args:
        chdir: /etc/openvpn/easy-rsa
      environment:
        EASYRSA_BATCH: "1"
      when: not server_crt_stat.stat.exists

    - name: Check if Client cert exists
      stat:
        path: /etc/openvpn/easy-rsa/pki/issued/{{ client_name }}.crt
      register: client_crt_stat

    - name: Generate client certificate
      command: ./easyrsa build-client-full {{ client_name }} nopass
      args:
        chdir: /etc/openvpn/easy-rsa
      environment:
        EASYRSA_BATCH: "1"
      when: not client_crt_stat.stat.exists

    # OpenVPN server configuration
    - name: Place server.conf
      template:
        src: ../templates/openvpn_server.conf.j2
        dest: /etc/openvpn/server.conf
      notify: Restart OpenVPN

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Get default network interface
      set_fact:
        network_interface: "{{ ansible_default_ipv4.interface }}"
    
    - name: Allow all traffic from the VPN subnet to any destination
      shell: |
        iptables -A FORWARD -s {{ vpn_subnet }}/24 -j ACCEPT
        iptables -A FORWARD -d {{ vpn_subnet }}/24 -j ACCEPT
      args:
        executable: /bin/bash

    - name: Set up NAT for VPN subnet
      shell: |
        iptables -t nat -A POSTROUTING -s {{ vpn_subnet }}/24 -o {{ network_interface }} -j MASQUERADE
      args:
        executable: /bin/bash

    - name: Ensure iptables rules directory exists
      file:
        path: /etc/iptables
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Save iptables rules
      shell: iptables-save > /etc/iptables/rules.v4
      args:
        executable: /bin/bash

    - name: Install iptables-persistent to ensure rules persist across reboots
      apt:
        name: iptables-persistent
        state: present
        update_cache: yes

    # - name: Set up NAT via iptables
    #   shell: iptables -t nat -A POSTROUTING -s {{ vpn_subnet }}/24 -o eth0 -j MASQUERADE
    #   args:
    #     executable: /bin/bash

    - name: Start and enable OpenVPN service
      service:
        name: openvpn@server
        state: started
        enabled: yes

    # Generate client configuration file
    - name: Read CA cert
      slurp:
        src: /etc/openvpn/easy-rsa/pki/ca.crt
      register: ca_crt_file

    - name: Read client cert
      slurp:
        src: /etc/openvpn/easy-rsa/pki/issued/{{ client_name }}.crt
      register: client_crt_file

    - name: Read client key
      slurp:
        src: /etc/openvpn/easy-rsa/pki/private/{{ client_name }}.key
      register: client_key_file

    - name: Create client ovpn file
      template:
        src: ../templates/client_config.ovpn.j2
        dest: /home/ubuntu/{{ client_name }}.ovpn
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      vars:
        ca_crt: "{{ ca_crt_file.content | b64decode }}"
        client_crt: "{{ client_crt_file.content | b64decode }}"
        client_key: "{{ client_key_file.content | b64decode }}"
        vpn_remote_host: "{{ hostvars[inventory_hostname].ansible_host }}"  

  handlers:
    - name: Restart OpenVPN
      service:
        name: openvpn@server
        state: restarted